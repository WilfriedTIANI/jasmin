services:
  redis:
    image: redis:7.0.5-alpine
    restart: unless-stopped
    volumes:
      - redis:/data
    networks:
      - jasmin
    healthcheck:
      test: [ "CMD", "redis-cli", "--raw", "incr", "ping" ]
      retries: 3
      timeout: 5s
    deploy:
      resources:
        limits:
          cpus: '0.2'
          memory: 128M
    security_opt:
      - no-new-privileges:true

  rabbit-mq:
    image: rabbitmq:3.11.3-alpine
    restart: unless-stopped
    volumes:
      - rabbitmq:/var/lib/rabbitmq
    networks:
      - jasmin
    healthcheck:
      test: [ "CMD", "rabbitmq-diagnostics", "-q", "ping" ]
      interval: 30s
      timeout: 30s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 525M
    security_opt:
      - no-new-privileges:true

  jasmin:
    build:
      context: ./
      dockerfile: ./docker/Dockerfile.restapi.alpine
    image: jasmin:restapi
    restart: always
    ports:
      - '${FORWARD_JASMIN_SMPP_PORT:-2775}:2775'
      - '${FORWARD_JASMIN_CLI_PORT:-8990}:8990'
      - '${FORWARD_JASMIN_HTTP_PORT:-1401}:1401'
    volumes:
      - jasmin_config:/etc/jasmin
      - jasmin_store:/etc/jasmin/store
      - jasmin_logs:/var/log/jasmin
    tmpfs:
      - /tmp
    networks:
      - jasmin
    depends_on:
      redis:
        condition: service_healthy
      rabbit-mq:
        condition: service_healthy
    environment:
      REDIS_CLIENT_HOST: ${REDIS_CLIENT_HOST:-redis}
      REDIS_CLIENT_PORT: ${REDIS_CLIENT_PORT:-6379}
      AMQP_BROKER_HOST: ${AMQP_BROKER_HOST:-rabbit-mq}
      AMQP_BROKER_PORT: ${AMQP_BROKER_PORT:-5672}
      ENABLE_PUBLISH_SUBMIT_SM_RESP: ${ENABLE_PUBLISH_SUBMIT_SM_RESP:-1}
      RESTAPI_MODE: ${RESTAPI_MODE:-0}
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 256M
    security_opt:
      - no-new-privileges:true


  jasmin-restapi:
    build:
      context: ./
      dockerfile: ./docker/Dockerfile.restapi
    image: jasmin:restapi
    restart: always
    ports:
      - '${FORWARD_JASMIN_RESTAPI_PORT:-8080}:8080'
    volumes:
      - restapi_logs:/var/log/jasmin
    tmpfs:
      - /tmp
    networks:
      - jasmin
    depends_on:
      - jasmin
    environment:
      REDIS_CLIENT_HOST: ${REDIS_CLIENT_HOST:-redis}
      REDIS_CLIENT_PORT: ${REDIS_CLIENT_PORT:-6379}
      AMQP_BROKER_HOST: ${AMQP_BROKER_HOST:-rabbit-mq}
      AMQP_BROKER_PORT: ${AMQP_BROKER_PORT:-5672}
      RESTAPI_MODE: ${RESTAPI_MODE:-1}
      RESTAPI_OLD_HTTP_HOST: ${RESTAPI_OLD_HTTP_HOST:-jasmin}

  prometheus:
    image: prom/prometheus:latest
    restart: unless-stopped
    ports:
      - '9090:9090'
    volumes:
      - ./docker/prometheus/config/prometheus.yml:/etc/prometheus/prometheus.yml
      - monitoring_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    depends_on:
      - jasmin
    deploy:
      resources:
        limits:
          cpus: '0.2'
          memory: 128M
    security_opt:
      - no-new-privileges:true

  grafana:
    image: grafana/grafana
    restart: unless-stopped
    ports:
      - 3000:3000
    environment:
      GF_INSTALL_PLUGINS: "grafana-clock-panel,grafana-simple-json-datasource"
    volumes:
      - ./docker/grafana/provisioning/datasources:/etc/grafana/provisioning/datasources:ro
      - ./docker/grafana/provisioning/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./docker/grafana/dashboards:/opt/grafana-dashboards:ro

      - monitoring_data:/var/lib/grafana
    depends_on:
      - prometheus
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
    security_opt:
      - no-new-privileges:true


networks:
  jasmin:
    driver: bridge
volumes:
  jasmin_config: {}
  jasmin_store: {}
  jasmin_logs: {}
  restapi_logs: {}
  rabbitmq: {}
  redis: {}
  monitoring_data: { }
